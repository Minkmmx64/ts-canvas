{"version":3,"file":"bundle.js","sources":["../src/math/algebra.ts","../src/core/CanvasEventListener.ts","../src/core/CanvasTransform.ts","../src/core/CavnasCoordinate.ts","../src/core/CanvasSystem.ts","../src/index.ts"],"sourcesContent":["import { Point2D } from \"../type/common.type\";\r\n\r\nexport const coordinate = {\r\n  div: (a: Point2D, b: Point2D): Point2D => ({ x: a.x - b.x, y: a.y - b.y }),\r\n  add: (a: Point2D, b: Point2D): Point2D => ({ x: a.x + b.x, y: a.y + b.y })\r\n}","import { coordinate } from \"../math/algebra\";\r\nimport { MousePoint2D, Point2D } from \"../type/common.type\";\r\nimport { CanvasSystem } from \"./CanvasSystem\";\r\n\r\nexport class CanvasEventListener {\r\n  private boundary !: Point2D;\r\n  private begin!: MousePoint2D;\r\n  private move!: MousePoint2D;\r\n  private preMove !: MousePoint2D;\r\n  private end!: MousePoint2D;\r\n  private canvasSystem !: CanvasSystem;\r\n\r\n  public canvas!: HTMLCanvasElement;\r\n\r\n  constructor(canvas: HTMLCanvasElement, boundary: Point2D, canvasSystem: CanvasSystem) {\r\n    if (!canvas) throw new TypeError(\"canvas is not exist\");\r\n    this.canvas = canvas;\r\n    this.boundary = boundary;\r\n    this.canvasSystem = canvasSystem;\r\n    this.initEvenListener();\r\n  }\r\n\r\n  private toCanvasScreenPoint(point: Point2D): Point2D {\r\n    return coordinate.div(point, this.boundary);\r\n  }\r\n\r\n  public initEvenListener() {\r\n    const eventMouseDown = this.eventMouseDown.bind(this);\r\n    const eventMouseUp = this.eventMouseUp.bind(this);\r\n    const eventMouseMove = this.eventMouseMove.bind(this);\r\n    const eventWheel = this.eventWheel.bind(this);\r\n    this.canvas.addEventListener(\"mousedown\", e => {\r\n      eventMouseDown(e);\r\n      this.canvas.addEventListener(\"mousemove\", eventMouseMove);\r\n    });\r\n    this.canvas.addEventListener(\"mouseup\", e => {\r\n      eventMouseUp(e);\r\n      this.canvas.removeEventListener(\"mousemove\", eventMouseMove);\r\n    });\r\n    this.canvas.addEventListener(\"wheel\", eventWheel);\r\n    this.canvas.addEventListener(\"contextmenu\", e => {\r\n      e.preventDefault();\r\n    })\r\n  }\r\n\r\n  private eventMouseDown(e: MouseEvent) {\r\n    this.begin = this.toCanvasScreenPoint({ x: e.clientX, y: e.clientY });\r\n    this.preMove = this.toCanvasScreenPoint({ x: e.clientX, y: e.clientY });\r\n    console.log(\"mousedown\", this.begin);\r\n  }\r\n\r\n  private eventMouseMove(e: MouseEvent) {\r\n    this.move = this.toCanvasScreenPoint({ x: e.clientX, y: e.clientY });\r\n    const translation = coordinate.div(this.move, this.preMove);\r\n    this.canvasSystem.canvasTransform.addTranslation(translation);\r\n    this.preMove = this.toCanvasScreenPoint({ x: e.clientX, y: e.clientY });\r\n    console.log(\"mousemove\", this.move);\r\n  }\r\n\r\n  private eventMouseUp(e: MouseEvent) {\r\n    this.end = this.toCanvasScreenPoint({ x: e.clientX, y: e.clientY });\r\n    console.log(\"mouseup\", this.end);\r\n  }\r\n\r\n  private eventWheel(e: WheelEvent) {\r\n    console.log(\"wheel\", e);\r\n    if (e.deltaY > 0) {\r\n      this.canvasSystem.canvasTransform.addScale(-this.canvasSystem.const.TRANSFORM_SCALE_STEP);\r\n    } else if (e.deltaY < 0) {\r\n      this.canvasSystem.canvasTransform.addScale(+this.canvasSystem.const.TRANSFORM_SCALE_STEP);\r\n    }\r\n  }\r\n}","import { coordinate } from \"../math/algebra\";\r\nimport { ITransform } from \"../type/canvas.type\";\r\nimport { Point2D } from \"../type/common.type\";\r\nimport { CanvasSystem } from \"./CanvasSystem\";\r\n\r\nexport class CanvasTransform {\r\n  public transform !: ITransform;\r\n\r\n  private canvasSystem !: CanvasSystem;\r\n\r\n  constructor(canvasSystem: CanvasSystem) {\r\n    this.canvasSystem = canvasSystem;\r\n    this.transform = {\r\n      translation: { x: 0, y: 0 },\r\n      scale: 1\r\n    }\r\n  }\r\n\r\n  public setTranslation(translation: Point2D) {\r\n    this.transform.translation = translation;\r\n    this.canvasSystem.render();\r\n  }\r\n\r\n  public addTranslation(diff: Point2D) {\r\n    this.transform.translation = coordinate.add(this.transform.translation, diff);\r\n    this.canvasSystem.render();\r\n  }\r\n\r\n  public setScale(scale: number) {\r\n    this.transform.scale = scale;\r\n    this.canvasSystem.render();\r\n  }\r\n\r\n  public addScale(diff: number) {\r\n    this.transform.scale += diff;\r\n    this.transform.scale = Math.max(\r\n      this.canvasSystem.const.TRANSFORM_SCALE_MIN,\r\n      Math.min(\r\n        this.canvasSystem.const.TRANSFORM_SCALE_MAX, this.transform.scale\r\n      ))\r\n    this.canvasSystem.render();\r\n  }\r\n\r\n  public getReTransformPoint(point: Point2D): Point2D {\r\n    return {\r\n      x: (point.x - this.transform.translation.x) / this.transform.scale,\r\n      y: (point.y - this.transform.translation.y) / this.transform.scale\r\n    }\r\n  }\r\n\r\n  public getTransformPoint(point: Point2D): Point2D {\r\n    return {\r\n      x: (point.x + this.transform.translation.x) * this.transform.scale,\r\n      y: (point.y + this.transform.translation.y) * this.transform.scale\r\n    }\r\n  }\r\n}","export class CavnasCoordinate {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  //canvas 坐标 => 屏幕坐标\r\n  //屏幕坐标 => canvas 坐标\r\n  //canvas 坐标 => 网格坐标\r\n  //网格坐标 => canvas 坐标\r\n}","import { AspectRatio, ICanvasOptions, ICanvasSystemOptions, SizeIntoAspectRatio } from \"../type/canvas.type\";\r\nimport { CanvasEventListener } from \"./CanvasEventListener\";\r\nimport { CanvasTransform } from \"./CanvasTransform\";\r\nimport { CavnasCoordinate } from \"./CavnasCoordinate\";\r\n\r\nexport class CanvasSystem {\r\n\r\n  private node !: HTMLCanvasElement;\r\n  private context !: CanvasRenderingContext2D;\r\n  private canvasOptions !: ICanvasOptions;\r\n\r\n  public canvasEventListener !: CanvasEventListener;\r\n  public canvasTransform !: CanvasTransform;\r\n  public cavnasCoordinate !: CavnasCoordinate;\r\n  public const = {\r\n    TRANSFORM_SCALE_STEP: 0.1,\r\n    TRANSFORM_SCALE_MAX: 5,\r\n    TRANSFORM_SCALE_MIN: 0.1,\r\n    GRID: {\r\n      SIZE: 100,\r\n    }\r\n  }\r\n\r\n  private constructor(canvas: HTMLCanvasElement, options: ICanvasSystemOptions<AspectRatio>) {\r\n    if (!canvas) throw new TypeError(\"canvas is not exist\");\r\n    const context = canvas.getContext(\"2d\");\r\n    if (!context) throw new TypeError(\"can not found CanvasRenderingContext2D\");\r\n    if (options.aspect === \"auto\") {\r\n      const size = options.size as SizeIntoAspectRatio<\"auto\">;\r\n      canvas.width = size.width;\r\n      canvas.height = size.height;\r\n    } else {\r\n      const size = options.size as SizeIntoAspectRatio<number>;\r\n      canvas.width = size;\r\n      canvas.height = size / options.aspect;\r\n    }\r\n    this.node = canvas;\r\n    this.context = context;\r\n    this.canvasOptions = options.canvasOptions;\r\n    canvas.style.width = canvas.width + \"px\";\r\n    canvas.style.height = canvas.height + \"px\";\r\n    canvas.style.background = this.canvasOptions.background ?? \"#ffffff\";\r\n    const { left, top } = canvas.getBoundingClientRect();\r\n    this.canvasEventListener = new CanvasEventListener(this.node, { x: left, y: top }, this);\r\n    this.canvasTransform = new CanvasTransform(this);\r\n    this.cavnasCoordinate = new CavnasCoordinate();\r\n    this.render();\r\n  }\r\n\r\n  static createCanvas(canvas: HTMLCanvasElement, options: ICanvasSystemOptions<number>): void;\r\n  static createCanvas(canvas: HTMLCanvasElement, options: ICanvasSystemOptions<\"auto\">): void;\r\n  static createCanvas(canvas: HTMLCanvasElement, options: ICanvasSystemOptions<AspectRatio>) {\r\n    return new CanvasSystem(canvas, options);\r\n  }\r\n\r\n  public render() {\r\n    const ctx = this.context;\r\n    ctx.clearRect(0, 0, this.node.width, this.node.height);\r\n    ctx.save();\r\n    ctx.translate(this.canvasTransform.transform.translation.x, this.canvasTransform.transform.translation.y);\r\n    ctx.scale(this.canvasTransform.transform.scale, this.canvasTransform.transform.scale);\r\n    this.drawRule();\r\n    ctx.fillStyle = \"#ff0000\";\r\n    ctx.fillRect(100, 100, 100, 100);\r\n    ctx.restore();\r\n  }\r\n\r\n  private drawRule() {\r\n    const begin = { x: 0, y: 0 };\r\n    const end = { x: this.node.width, y: this.node.height };\r\n    const step = this.const.GRID.SIZE * this.canvasTransform.transform.scale;\r\n    const ctx = this.context;\r\n    const transform = this.canvasTransform.transform;\r\n    const diffx = transform.translation.x - Math.floor(transform.translation.x / step) * step;\r\n    const diffy = transform.translation.y - Math.floor(transform.translation.y / step) * step;\r\n    /**\r\n     * 原来绘制区域(0,0) => (w,h)\r\n     * 平移后只需要对 每一列，每一行间隔 step 取模 = {x: diffx, y: diffy}\r\n     * 绘制时只需要绘制相对于(0,0) => (w,h) 平移\r\n     * moveTo,lineTo 时只需要把绘制的点求逆与ctx transform 抵消就可以实现无限滚动\r\n     */\r\n    for (let i = begin.x; i <= end.x; i += step) {\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"#000000\";\r\n      const lineBegin = this.canvasTransform.getReTransformPoint({ x: i + diffx, y: begin.y });\r\n      const lineEnd = this.canvasTransform.getReTransformPoint({ x: i + diffx, y: end.y });\r\n      ctx.moveTo(lineBegin.x, lineBegin.y);\r\n      ctx.lineTo(lineEnd.x, lineEnd.y);\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n    }\r\n    for (let i = begin.y; i <= end.y; i += step) {\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"#000000\";\r\n      const lineBegin = this.canvasTransform.getReTransformPoint({ x: begin.x, y: i + diffy });\r\n      const lineEnd = this.canvasTransform.getReTransformPoint({ x: end.x, y: i + diffy });\r\n      ctx.moveTo(lineBegin.x, lineBegin.y);\r\n      ctx.lineTo(lineEnd.x, lineEnd.y);\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n    }\r\n  }\r\n\r\n}","import { CanvasSystem } from \"./core/CanvasSystem\";\r\nimport { CanvasTools } from \"./core/CanvasTools\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\r\nconst System = CanvasSystem.createCanvas(canvas, {\r\n  aspect: \"auto\",\r\n  size: {\r\n    width: window.innerWidth - 50,\r\n    height: window.innerHeight - 50\r\n  },\r\n  canvasOptions: {\r\n    background: \"rgba(200,200,200,0.1)\"\r\n  }\r\n});\r\n\r\n// const tool = new CanvasTools();\r\n// tool.drawText(\r\n//   \"文字内容\",\r\n//   {\r\n//     size: 16,\r\n//     direction: \"horizontal\",\r\n//     color: \"#ff0000\"\r\n//   },\r\n//   80,\r\n//   80\r\n// )\r\n\r\n"],"names":["coordinate","a","b","CanvasEventListener","canvas","boundary","canvasSystem","point","eventMouseDown","eventMouseUp","eventMouseMove","eventWheel","e","translation","CanvasTransform","diff","scale","CavnasCoordinate","CanvasSystem","options","context","size","left","top","ctx","begin","end","step","transform","diffx","diffy","i","lineBegin","lineEnd"],"mappings":"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"}